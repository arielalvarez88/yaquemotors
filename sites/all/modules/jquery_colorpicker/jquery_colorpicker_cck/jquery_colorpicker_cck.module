<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions
 * and private functions for the jquery_colorpicker_cck module.
 *
 * @ingroup CCK
 */

/**
 * Implementation of hook_theme().
 */
function jquery_colorpicker_cck_theme() {
  return array(
    'jquery_colorpicker_cck' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function jquery_colorpicker_cck_widget_info() {
  return array(
    'jquery_colorpicker_cck' => array(
      'label' => t('jQuery Colorpicker'),
      'field types' => array('colorpicker_cck_textfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Includes a regex to check for valid values as an additional parameter
 * the validator can use. The regex can be overridden if necessary.
 */
function jquery_colorpicker_cck_elements() {
  return array(
    'jquery_colorpicker_cck' => array(
      '#input' => TRUE,
      '#columns' => array('value'),
      '#delta' => 0,
      '#process' => array('jquery_colorpicker_cck_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function jquery_colorpicker_cck_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $field_key = $element['#columns'][0];

  $value = isset($element['#value'][$field_key]) ? substr($element['#value'][$field_key],-6) : (isset($field['widget']['default_value'][0]['value']) ? substr($field['widget']['default_value'][0]['value'],1) : 'FFFFFF');

  $element[$field_key] = array(
    '#type' => 'colorpicker',
    '#default_value' => empty($value) ? 'FFFFFF' : $value,
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  // Make sure we don't wipe out element validation added elsewhere.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array('jquery_colorpicker_cck_integration');
  }
  if (!empty($field['prefix'])) {
    $prefixes = explode('|', $field['prefix']);
    $element[$field_key]['#field_prefix'] = array_pop($prefixes);
  }
  if (!empty($field['suffix'])) {
    $suffixes = explode('|', $field['suffix']);
    $element[$field_key]['#field_suffix'] = array_pop($suffixes);
  }

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  if(isset($edit)) {
    // Next we decide what background to use to render the element. In order to ensure the background exists, we create an array of
    // the two possibilities, that we will use to compare the value submitted in the Form API definition
    $backgrounds = array('select.png', 'select2.png');
    // Now we check to see if the value in the Form API definition is valid. If it is, we use it, if it's not, we use a default value
    $background = (in_array($element['#jquery_colorpicker_background'], $backgrounds)) ? $element['#jquery_colorpicker_background'] : 'select.png';
    // Since we know the background, we can then get the URL of it to pass to the javascript function
    $background_url = base_path() . $path .'colorpicker/images/' . $background;
    // next we determine what the default value for the form element is. This will also be passed to the javascript function.
    if(isset($element['#value']['value'])) {
      $default_color = '#' . $element['#value']['value'];
    } else {
      $default_color = strtolower("#".$default_value);
    }
    // Finally we build an array of all the settings to be used by the javascript function
    $settings = array('ids' => array($element['#id'].'-value'), 'backgrounds' => array($background_url), 'backgroundColors' => array($default_color), $element['#id'] . '-defaultColor' => $default_color);

    // And we pass the settings in a namespace to the Javascript
    drupal_add_js(array('jqueryColorpicker' => $settings), 'setting');
  }

  return $element;
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values. 
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 * the entire form array, $form['#node'] holds node information
 * @param $form_state
 * the form_state, $form_state['values'] holds the form values.
 * @param $field
 * the field array
 * @param $delta
 * the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 * the form item for a single element for this field
 */
function jquery_colorpicker_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : /*array('value' =>$field['widget']['default_value'][0]['value'])*/'',
  );
  return $element;
}

/**
 * FAPI theme for an individual colorpicker_cck element.
 */
function theme_jquery_colorpicker_cck($element) {
  return $element['#children'];
}

/**
 * This function allows to integrate the data formats between jquery_colorpicker_cck and colorpicker_cck modules
 * 
 * @param  $element
 * @param  $form_state
 */
function jquery_colorpicker_cck_integration($element, &$form_state) {
  if(isset($form_state['values'][$element['#field_name']])) {
    $form_state['values'][$element['#field_name']][$element['#delta']]['value'] = '#'. $form_state['values'][$element['#field_name']][$element['#delta']]['value'];
  } else {
    $form_state['values']['default_value_widget'][$element['#field_name']][0]['value'] = '#'. $form_state['values']['default_value_widget'][$element['#field_name']][0]['value'];
  }
}